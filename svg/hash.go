package svg

// generated by hasher -type=Hash -file=hash.go; DO NOT EDIT, except for adding more constants to the list and rerun go generate

// uses github.com/tdewolff/hasher
//go:generate hasher -type=Hash -file=hash.go
type Hash uint32

const (
	A              Hash = 0x3101
	D              Hash = 0x1
	Defs           Hash = 0x4
	Fill           Hash = 0x1004
	Flood_Color    Hash = 0x230b
	G              Hash = 0x1501
	Height         Hash = 0x4e06
	Lighting_Color Hash = 0x130e
	Line           Hash = 0x7504
	Marker         Hash = 0x3006
	Mask           Hash = 0x3604
	Metadata       Hash = 0x3a08
	Missing_Glyph  Hash = 0x420d
	Path           Hash = 0x5404
	Pattern        Hash = 0x5807
	Points         Hash = 0x5f06
	Polygon        Hash = 0x6a07
	Polyline       Hash = 0x7108
	Rect           Hash = 0xc04
	Rx             Hash = 0x2002
	Ry             Hash = 0x2d02
	Stop_Color     Hash = 0x30a
	Stroke         Hash = 0x6406
	Style          Hash = 0x7905
	Svg            Hash = 0x7e03
	Switch         Hash = 0x8106
	Symbol         Hash = 0x8706
	Version        Hash = 0x8d07
	ViewBox        Hash = 0x9407
	Width          Hash = 0x9c05
	X              Hash = 0x2101
	X1             Hash = 0x2102
	X2             Hash = 0x9a02
	Y              Hash = 0x2e01
	Y1             Hash = 0x2e02
	Y2             Hash = 0xa102
)

// String returns the hash' name.
func (i Hash) String() string {
	start := uint32(i >> 8)
	n := uint32(i & 0xff)
	if start+n > uint32(len(_Hash_text)) {
		return ""
	}
	return _Hash_text[start : start+n]
}

// Hash returns the hash whose name is s. It returns zero if there is no
// such hash. It is case sensitive.
func ToHash(s []byte) Hash {
	if len(s) == 0 || len(s) > _Hash_maxLen {
		return 0
	}
	h := _Hash_fnv(s)
	if i := _Hash_table[h&uint32(len(_Hash_table)-1)]; int(i&0xff) == len(s) && _Hash_match(_Hash_string(i), s) {
		return i
	}
	if i := _Hash_table[(h>>16)&uint32(len(_Hash_table)-1)]; int(i&0xff) == len(s) && _Hash_match(_Hash_string(i), s) {
		return i
	}
	return 0
}

// _Hash_fnv computes the FNV hash with an arbitrary starting value h.
func _Hash_fnv(s []byte) uint32 {
	h := uint32(_Hash_hash0)
	for i := range s {
		h ^= uint32(s[i])
		h *= 16777619
	}
	return h
}

func _Hash_match(s string, t []byte) bool {
	for i, c := range t {
		if s[i] != c {
			return false
		}
	}
	return true
}

func _Hash_string(i Hash) string {
	return _Hash_text[i>>8 : i>>8+i&0xff]
}

const _Hash_hash0 = 0xaa209b8e
const _Hash_maxLen = 14
const _Hash_text = "defstop-colorectfillighting-colorx1flood-colory1markermaskme" +
	"tadatamissing-glypheightpathpatternpointstrokepolygonpolylin" +
	"estylesvgswitchsymbolversionviewBox2widthy2"

var _Hash_table = [1 << 6]Hash{
	0x2:  0x2101, // x
	0x3:  0x1004, // fill
	0x6:  0x8706, // symbol
	0x9:  0x2102, // x1
	0xa:  0x5404, // path
	0xb:  0x1501, // g
	0xc:  0x3604, // mask
	0xd:  0x9c05, // width
	0x10: 0x9a02, // x2
	0x14: 0x30a,  // stop-color
	0x15: 0x2e01, // y
	0x18: 0x4,    // defs
	0x1c: 0x5807, // pattern
	0x1d: 0x7504, // line
	0x1e: 0x1,    // d
	0x20: 0x230b, // flood-color
	0x21: 0xa102, // y2
	0x22: 0x6406, // stroke
	0x24: 0x2002, // rx
	0x25: 0x4e06, // height
	0x26: 0xc04,  // rect
	0x29: 0x5f06, // points
	0x2b: 0x6a07, // polygon
	0x2c: 0x2e02, // y1
	0x2d: 0x420d, // missing-glyph
	0x2e: 0x2d02, // ry
	0x2f: 0x3006, // marker
	0x30: 0x9407, // viewBox
	0x32: 0x8d07, // version
	0x34: 0x7905, // style
	0x36: 0x8106, // switch
	0x37: 0x7e03, // svg
	0x3a: 0x7108, // polyline
	0x3b: 0x3a08, // metadata
	0x3c: 0x130e, // lighting-color
	0x3d: 0x3101, // a
}
